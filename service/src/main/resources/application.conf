api {
  host = 127.0.0.1
  port = 9000
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      loglevel = "OFF"
    }
  }

  remote {
    log-remote-lifecycle-events = on //off
    netty.tcp {
      hostname = 127.0.0.1 # external (logical) hostname
      port = 2551        # external (logical) port
    }
  }

  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }

  cluster {
    seed-nodes = ["akka.tcp://sandbox-actor-system@127.0.0.1:2551"]
  }
}

kamon {

  datadog {
    # Interval between metrics data flushes to Datadog. It's value must be equal or greater than the
    # kamon.metric.tick-interval setting.
    flush-interval = 10 seconds


    # All time values are collected in nanoseconds,
    # to scale before sending to datadog set "time-units" to "s" or "ms" or "Âµs".
    # Value "n" is equivalent to omitting the setting
    time-units = "ms"

    # All memory values are collected in bytes,
    # to scale before sending to datadog set "memory-units" to "gb" or "mb" or "kb".
    # Value "b" is equivalent to omitting the setting
    memory-units = "b"
  }

  metric.filters {
    akka-actor {
//      includes = ["**"]
      includes = ["sandbox-actor-system/**"]
          excludes = [ "sandbox-actor-system/user/Stream**",
            "sandbox-actor-system/system/transports**",
            "sandbox-actor-system/system/sharding/UserActorCoordinator**",
            "sandbox-actor-system/system/remote**",
            "sandbox-actor-system/system/cluster**",
            "sandbox-actor-system/system/log**",
            "sandbox-actor-system/system/inmemory**",
            "sandbox-actor-system/system/cluster**",
            "sandbox-actor-system/system/IO**" ]
    }

    akka-dispatcher {
      includes = ["sandbox-actor-system/**"]
//      includes = ["**"]
    }
  }

  jmx {
    subscriptions {
      histogram = ["**"]
      min-max-counter = ["**"]
      gauge = ["**"]
      counter = ["**"]
      trace = ["**"]
      trace-segment = ["**"]
      system-metric = ["**"]
      http-server = ["**"]
      kamon-mxbeans = ["**"]
    }

  }

  modules {
    kamon-mxbeans {
      auto-start = yes
      requires-aspectj = no
      extension-class = "kamon.jmx.extension.JMXMetricImporter"
    }
  }

  kamon-mxbeans {
    mbeans = [
    ],
    identify-delay-interval-ms = 1000,
    identify-interval-ms = 1000,
    value-check-interval-ms = 1000
  }
}